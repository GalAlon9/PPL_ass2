(define make-ok
  (lambda (val)
    (cons "Ok"  val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (and (pair? res)
      (eq? (car res) "Ok"))
  )
 )
(define error?
  (lambda (res)
    (and (pair? res)
      (eq? (car res) "Failure"))
  )
 )

(define result?
  (lambda (res)
    (and(pair? res)
    (or(ok? res)
       (error? res))
    )
  )
 )

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if(ok? res)
         (f (cdr res))
         (make-error (cdr res))))
  )
)

(define make-dict
  (lambda ()
    (list)
  )
)

(define dict?
  (lambda (e)
    (or (empty? e)
         (and (pair? (car e))
              (dict? (cdr e)))
  )
))

(define get
  (lambda (dict k)
    (if (dict? dict)
         (if (empty? dict)
             (make-error "key not found")
             (if (eq? (car (car dict)) k)
                 (make-ok (cdr (car dict)))
                 (get (cdr dict) k)))
         (make-error "Error: not a dictionary"))
        
  )
)

(define put
  (lambda (dict k v)
    (if (dict? dict)
    (if (empty? dict)
        (make-ok  (list (cons k v)) )
        (if (eq? (car (car dict)) k)
            (make-ok (list (cons k v) (cdr dict)))
            (make-ok(cons (car dict) (put1 (cdr dict) k v)))))
    (make-error "Error: not a dictionary"))
  )
)

(define put1
  (lambda (dict k v)
    (if (empty? dict)
        (list (cons k v))
        (if (eq? (car (car dict)) k)
            (list (cons k v) (cdr dict))
            (cons (car dict) (put1 (cdr dict) k v))))
  )
)

(define map-dict
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
       (make-ok dict)
            (make-ok (cons (cons (car (car dict))  (f (cdr(car dict)))) (map-dict1 (cdr dict) f))))
    (make-error "Error: not a dictionary"))
  )
)

(define map-dict1
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
        dict
            (cons (cons (car (car dict))  (f (cdr(car dict)))) (map-dict1 (cdr dict) f)))
    (make-error "Error: not a dictionary"))
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)