(define make-ok
  (lambda (val)
    (cons "Ok"  val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (and (pair? res)
      (eq? (car res) "Ok"))
  )
 )
(define error?
  (lambda (res)
    (and (pair? res)
      (eq? (car res) "Failure"))
  )
 )

(define result?
  (lambda (res)
    (and(pair? res)
    (or(ok? res)
       (error? res))
    )
  )
 )

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if(ok? res)
         (f (cdr res))
         (make-error (cdr res))))
  )
)

(define make-dict
  (lambda ()
    @TODO
  )
)

(define dict?
  (lambda (e)
    @TODO
  )
)

(define get
  (lambda (dict k)
    @TODO
  )
)

(define put
  (lambda (dict k v)
    @TODO
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)